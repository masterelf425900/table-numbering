/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TableNumberingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultIncrement: 1
};
var TableNumberingPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "insert-numbered-row-below",
      name: "Insert Numbered Row Below",
      editorCallback: (editor, view) => {
        this.insertNumberedRow(editor);
      }
    });
    this.addSettingTab(new TableNumberingSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  insertNumberedRow(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    if (!line.trim().startsWith("|")) {
      return;
    }
    let startLine = cursor.line;
    while (startLine > 0 && editor.getLine(startLine - 1).trim().startsWith("|")) {
      startLine--;
    }
    let endLine = cursor.line;
    while (endLine < editor.lineCount() - 1 && editor.getLine(endLine + 1).trim().startsWith("|")) {
      endLine++;
    }
    const table = editor.getRange({ line: startLine, ch: 0 }, { line: endLine, ch: editor.getLine(endLine).length });
    const rows = table.split("\n");
    const rowIndex = cursor.line - startLine;
    const newRowIndex = rowIndex + 1;
    let newRow = rows[rowIndex];
    const match = newRow.match(/^\|(\s*\d+\.)/);
    if (match) {
      const currentNumber = parseInt(match[1]);
      newRow = newRow.replace(/^\|(\s*\d+\.)/, `|${currentNumber + this.settings.defaultIncrement}.`);
    }
    rows.splice(newRowIndex, 0, newRow);
    for (let i = newRowIndex + 1; i < rows.length; i++) {
      rows[i] = rows[i].replace(
        /^\|(\s*)(\d+)\./,
        (_, space, num) => `|${space}${parseInt(num) + this.settings.defaultIncrement}.`
      );
    }
    const newTable = rows.join("\n");
    editor.replaceRange(newTable, { line: startLine, ch: 0 }, { line: endLine, ch: editor.getLine(endLine).length });
  }
};
var TableNumberingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Table Numbering Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Increment").setDesc("The number to increment by when inserting a new row").addText((text) => text.setPlaceholder("Enter a number").setValue(String(this.plugin.settings.defaultIncrement)).onChange(async (value) => {
      const numValue = Number(value);
      if (!isNaN(numValue)) {
        this.plugin.settings.defaultIncrement = numValue;
        await this.plugin.saveSettings();
      }
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbnRlcmZhY2UgVGFibGVOdW1iZXJpbmdTZXR0aW5ncyB7XG5cdGRlZmF1bHRJbmNyZW1lbnQ6IG51bWJlcjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogVGFibGVOdW1iZXJpbmdTZXR0aW5ncyA9IHtcblx0ZGVmYXVsdEluY3JlbWVudDogMVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZU51bWJlcmluZ1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBUYWJsZU51bWJlcmluZ1NldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0Ly8gQWRkIHRoZSBjb21tYW5kIHRvIGluc2VydCBhIG51bWJlcmVkIHJvd1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2luc2VydC1udW1iZXJlZC1yb3ctYmVsb3cnLFxuXHRcdFx0bmFtZTogJ0luc2VydCBOdW1iZXJlZCBSb3cgQmVsb3cnLFxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0TnVtYmVyZWRSb3coZWRpdG9yKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEFkZCBzZXR0aW5ncyB0YWJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFRhYmxlTnVtYmVyaW5nU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0aW5zZXJ0TnVtYmVyZWRSb3coZWRpdG9yOiBFZGl0b3IpIHtcblx0XHRjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG5cdFx0Y29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnNvci5saW5lKTtcblxuXHRcdGlmICghbGluZS50cmltKCkuc3RhcnRzV2l0aCgnfCcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGV0IHN0YXJ0TGluZSA9IGN1cnNvci5saW5lO1xuXHRcdHdoaWxlIChzdGFydExpbmUgPiAwICYmIGVkaXRvci5nZXRMaW5lKHN0YXJ0TGluZSAtIDEpLnRyaW0oKS5zdGFydHNXaXRoKCd8JykpIHtcblx0XHRcdHN0YXJ0TGluZS0tO1xuXHRcdH1cblx0XHRsZXQgZW5kTGluZSA9IGN1cnNvci5saW5lO1xuXHRcdHdoaWxlIChlbmRMaW5lIDwgZWRpdG9yLmxpbmVDb3VudCgpIC0gMSAmJiBlZGl0b3IuZ2V0TGluZShlbmRMaW5lICsgMSkudHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xuXHRcdFx0ZW5kTGluZSsrO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRhYmxlID0gZWRpdG9yLmdldFJhbmdlKHsgbGluZTogc3RhcnRMaW5lLCBjaDogMCB9LCB7IGxpbmU6IGVuZExpbmUsIGNoOiBlZGl0b3IuZ2V0TGluZShlbmRMaW5lKS5sZW5ndGggfSk7XG5cdFx0Y29uc3Qgcm93cyA9IHRhYmxlLnNwbGl0KCdcXG4nKTtcblxuXHRcdGNvbnN0IHJvd0luZGV4ID0gY3Vyc29yLmxpbmUgLSBzdGFydExpbmU7XG5cdFx0Y29uc3QgbmV3Um93SW5kZXggPSByb3dJbmRleCArIDE7XG5cblx0XHRsZXQgbmV3Um93ID0gcm93c1tyb3dJbmRleF07XG5cdFx0Y29uc3QgbWF0Y2ggPSBuZXdSb3cubWF0Y2goL15cXHwoXFxzKlxcZCtcXC4pLyk7XG5cdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50TnVtYmVyID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuXHRcdFx0bmV3Um93ID0gbmV3Um93LnJlcGxhY2UoL15cXHwoXFxzKlxcZCtcXC4pLywgYHwke2N1cnJlbnROdW1iZXIgKyB0aGlzLnNldHRpbmdzLmRlZmF1bHRJbmNyZW1lbnR9LmApO1xuXHRcdH1cblxuXHRcdHJvd3Muc3BsaWNlKG5ld1Jvd0luZGV4LCAwLCBuZXdSb3cpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IG5ld1Jvd0luZGV4ICsgMTsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHJvd3NbaV0gPSByb3dzW2ldLnJlcGxhY2UoL15cXHwoXFxzKikoXFxkKylcXC4vLCAoXywgc3BhY2UsIG51bSkgPT4gXG5cdFx0XHRcdGB8JHtzcGFjZX0ke3BhcnNlSW50KG51bSkgKyB0aGlzLnNldHRpbmdzLmRlZmF1bHRJbmNyZW1lbnR9LmBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbmV3VGFibGUgPSByb3dzLmpvaW4oJ1xcbicpO1xuXHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UobmV3VGFibGUsIHsgbGluZTogc3RhcnRMaW5lLCBjaDogMCB9LCB7IGxpbmU6IGVuZExpbmUsIGNoOiBlZGl0b3IuZ2V0TGluZShlbmRMaW5lKS5sZW5ndGggfSk7XG5cdH1cbn1cblxuY2xhc3MgVGFibGVOdW1iZXJpbmdTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogVGFibGVOdW1iZXJpbmdQbHVnaW47XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVGFibGVOdW1iZXJpbmdQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHtjb250YWluZXJFbH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnVGFibGUgTnVtYmVyaW5nIFNldHRpbmdzJ30pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnRGVmYXVsdCBJbmNyZW1lbnQnKVxuXHRcdFx0LnNldERlc2MoJ1RoZSBudW1iZXIgdG8gaW5jcmVtZW50IGJ5IHdoZW4gaW5zZXJ0aW5nIGEgbmV3IHJvdycpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciBhIG51bWJlcicpXG5cdFx0XHRcdC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdEluY3JlbWVudCkpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRjb25zdCBudW1WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdFx0XHRcdFx0aWYgKCFpc05hTihudW1WYWx1ZSkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRJbmNyZW1lbnQgPSBudW1WYWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkpO1xuXHR9XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2RTtBQU03RSxJQUFNLG1CQUEyQztBQUFBLEVBQ2hELGtCQUFrQjtBQUNuQjtBQUVBLElBQXFCLHVCQUFyQixjQUFrRCx1QkFBTztBQUFBLEVBR3hELE1BQU0sU0FBUztBQUNkLFVBQU0sS0FBSyxhQUFhO0FBR3hCLFNBQUssV0FBVztBQUFBLE1BQ2YsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFDdkQsYUFBSyxrQkFBa0IsTUFBTTtBQUFBLE1BQzlCO0FBQUEsSUFDRCxDQUFDO0FBR0QsU0FBSyxjQUFjLElBQUkseUJBQXlCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFBQSxFQUNoRTtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQUM7QUFBQSxFQUVaLE1BQU0sZUFBZTtBQUNwQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzFFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFBQSxFQUVBLGtCQUFrQixRQUFnQjtBQUNqQyxVQUFNLFNBQVMsT0FBTyxVQUFVO0FBQ2hDLFVBQU0sT0FBTyxPQUFPLFFBQVEsT0FBTyxJQUFJO0FBRXZDLFFBQUksQ0FBQyxLQUFLLEtBQUssRUFBRSxXQUFXLEdBQUcsR0FBRztBQUNqQztBQUFBLElBQ0Q7QUFFQSxRQUFJLFlBQVksT0FBTztBQUN2QixXQUFPLFlBQVksS0FBSyxPQUFPLFFBQVEsWUFBWSxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsR0FBRyxHQUFHO0FBQzdFO0FBQUEsSUFDRDtBQUNBLFFBQUksVUFBVSxPQUFPO0FBQ3JCLFdBQU8sVUFBVSxPQUFPLFVBQVUsSUFBSSxLQUFLLE9BQU8sUUFBUSxVQUFVLENBQUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxHQUFHLEdBQUc7QUFDOUY7QUFBQSxJQUNEO0FBRUEsVUFBTSxRQUFRLE9BQU8sU0FBUyxFQUFFLE1BQU0sV0FBVyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxJQUFJLE9BQU8sUUFBUSxPQUFPLEVBQUUsT0FBTyxDQUFDO0FBQy9HLFVBQU0sT0FBTyxNQUFNLE1BQU0sSUFBSTtBQUU3QixVQUFNLFdBQVcsT0FBTyxPQUFPO0FBQy9CLFVBQU0sY0FBYyxXQUFXO0FBRS9CLFFBQUksU0FBUyxLQUFLLFFBQVE7QUFDMUIsVUFBTSxRQUFRLE9BQU8sTUFBTSxlQUFlO0FBQzFDLFFBQUksT0FBTztBQUNWLFlBQU0sZ0JBQWdCLFNBQVMsTUFBTSxDQUFDLENBQUM7QUFDdkMsZUFBUyxPQUFPLFFBQVEsaUJBQWlCLElBQUksZ0JBQWdCLEtBQUssU0FBUyxtQkFBbUI7QUFBQSxJQUMvRjtBQUVBLFNBQUssT0FBTyxhQUFhLEdBQUcsTUFBTTtBQUVsQyxhQUFTLElBQUksY0FBYyxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDbkQsV0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7QUFBQSxRQUFRO0FBQUEsUUFBbUIsQ0FBQyxHQUFHLE9BQU8sUUFDdkQsSUFBSSxRQUFRLFNBQVMsR0FBRyxJQUFJLEtBQUssU0FBUztBQUFBLE1BQzNDO0FBQUEsSUFDRDtBQUVBLFVBQU0sV0FBVyxLQUFLLEtBQUssSUFBSTtBQUMvQixXQUFPLGFBQWEsVUFBVSxFQUFFLE1BQU0sV0FBVyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxJQUFJLE9BQU8sUUFBUSxPQUFPLEVBQUUsT0FBTyxDQUFDO0FBQUEsRUFDaEg7QUFDRDtBQUVBLElBQU0sMkJBQU4sY0FBdUMsaUNBQWlCO0FBQUEsRUFHdkQsWUFBWSxLQUFVLFFBQThCO0FBQ25ELFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUVBLFVBQWdCO0FBQ2YsVUFBTSxFQUFDLFlBQVcsSUFBSTtBQUV0QixnQkFBWSxNQUFNO0FBRWxCLGdCQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU0sMkJBQTBCLENBQUM7QUFFN0QsUUFBSSx3QkFBUSxXQUFXLEVBQ3JCLFFBQVEsbUJBQW1CLEVBQzNCLFFBQVEscURBQXFELEVBQzdELFFBQVEsVUFBUSxLQUNmLGVBQWUsZ0JBQWdCLEVBQy9CLFNBQVMsT0FBTyxLQUFLLE9BQU8sU0FBUyxnQkFBZ0IsQ0FBQyxFQUN0RCxTQUFTLE9BQU8sVUFBVTtBQUMxQixZQUFNLFdBQVcsT0FBTyxLQUFLO0FBQzdCLFVBQUksQ0FBQyxNQUFNLFFBQVEsR0FBRztBQUNyQixhQUFLLE9BQU8sU0FBUyxtQkFBbUI7QUFDeEMsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ2hDO0FBQUEsSUFDRCxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
