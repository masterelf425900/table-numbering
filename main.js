/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NumberedRowPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var NumberedRowPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "insert-numbered-row-below",
      name: "Insert Numbered Row Below",
      editorCallback: (editor, view) => {
        this.insertNumberedRow(editor);
      }
    });
    this.addSettingTab(new NumberedRowSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  insertNumberedRow(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    if (!line.trim().startsWith("|")) {
      return;
    }
    let startLine = cursor.line;
    while (startLine > 0 && editor.getLine(startLine - 1).trim().startsWith("|")) {
      startLine--;
    }
    let endLine = cursor.line;
    while (endLine < editor.lineCount() - 1 && editor.getLine(endLine + 1).trim().startsWith("|")) {
      endLine++;
    }
    const table = editor.getRange({ line: startLine, ch: 0 }, { line: endLine, ch: editor.getLine(endLine).length });
    const rows = table.split("\n");
    const rowIndex = cursor.line - startLine;
    const newRowIndex = rowIndex + 1;
    let newRow = rows[rowIndex];
    const match = newRow.match(/^\|(\s*\d+\.)/);
    if (match) {
      const currentNumber = parseInt(match[1]);
      newRow = newRow.replace(/^\|(\s*\d+\.)/, `|${currentNumber + 1}.`);
    }
    rows.splice(newRowIndex, 0, newRow);
    for (let i = newRowIndex + 1; i < rows.length; i++) {
      rows[i] = rows[i].replace(
        /^\|(\s*)(\d+)\./,
        (_, space, num) => `|${space}${parseInt(num) + 1}.`
      );
    }
    const newTable = rows.join("\n");
    editor.replaceRange(newTable, { line: startLine, ch: 0 }, { line: endLine, ch: editor.getLine(endLine).length });
  }
};
var NumberedRowSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Numbered Row Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNeVBsdWdpblNldHRpbmdzID0ge1xuXHRteVNldHRpbmc6ICdkZWZhdWx0J1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOdW1iZXJlZFJvd1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBNeVBsdWdpblNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0Ly8gQWRkIHRoZSBjb21tYW5kIHRvIGluc2VydCBhIG51bWJlcmVkIHJvd1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2luc2VydC1udW1iZXJlZC1yb3ctYmVsb3cnLFxuXHRcdFx0bmFtZTogJ0luc2VydCBOdW1iZXJlZCBSb3cgQmVsb3cnLFxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0TnVtYmVyZWRSb3coZWRpdG9yKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEFkZCBzZXR0aW5ncyB0YWJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IE51bWJlcmVkUm93U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0aW5zZXJ0TnVtYmVyZWRSb3coZWRpdG9yOiBFZGl0b3IpIHtcblx0XHRjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG5cdFx0Y29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnNvci5saW5lKTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIGluIGEgdGFibGVcblx0XHRpZiAoIWxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZpbmQgdGhlIHRhYmxlIGJvdW5kYXJpZXNcblx0XHRsZXQgc3RhcnRMaW5lID0gY3Vyc29yLmxpbmU7XG5cdFx0d2hpbGUgKHN0YXJ0TGluZSA+IDAgJiYgZWRpdG9yLmdldExpbmUoc3RhcnRMaW5lIC0gMSkudHJpbSgpLnN0YXJ0c1dpdGgoJ3wnKSkge1xuXHRcdFx0c3RhcnRMaW5lLS07XG5cdFx0fVxuXHRcdGxldCBlbmRMaW5lID0gY3Vyc29yLmxpbmU7XG5cdFx0d2hpbGUgKGVuZExpbmUgPCBlZGl0b3IubGluZUNvdW50KCkgLSAxICYmIGVkaXRvci5nZXRMaW5lKGVuZExpbmUgKyAxKS50cmltKCkuc3RhcnRzV2l0aCgnfCcpKSB7XG5cdFx0XHRlbmRMaW5lKys7XG5cdFx0fVxuXG5cdFx0Ly8gRXh0cmFjdCB0aGUgdGFibGVcblx0XHRjb25zdCB0YWJsZSA9IGVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IHN0YXJ0TGluZSwgY2g6IDAgfSwgeyBsaW5lOiBlbmRMaW5lLCBjaDogZWRpdG9yLmdldExpbmUoZW5kTGluZSkubGVuZ3RoIH0pO1xuXHRcdGNvbnN0IHJvd3MgPSB0YWJsZS5zcGxpdCgnXFxuJyk7XG5cblx0XHQvLyBGaW5kIHRoZSByb3cgdG8gZHVwbGljYXRlXG5cdFx0Y29uc3Qgcm93SW5kZXggPSBjdXJzb3IubGluZSAtIHN0YXJ0TGluZTtcblx0XHRjb25zdCBuZXdSb3dJbmRleCA9IHJvd0luZGV4ICsgMTtcblxuXHRcdC8vIENyZWF0ZSB0aGUgbmV3IHJvd1xuXHRcdGxldCBuZXdSb3cgPSByb3dzW3Jvd0luZGV4XTtcblx0XHRjb25zdCBtYXRjaCA9IG5ld1Jvdy5tYXRjaCgvXlxcfChcXHMqXFxkK1xcLikvKTtcblx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdGNvbnN0IGN1cnJlbnROdW1iZXIgPSBwYXJzZUludChtYXRjaFsxXSk7XG5cdFx0XHRuZXdSb3cgPSBuZXdSb3cucmVwbGFjZSgvXlxcfChcXHMqXFxkK1xcLikvLCBgfCR7Y3VycmVudE51bWJlciArIDF9LmApO1xuXHRcdH1cblxuXHRcdC8vIEluc2VydCB0aGUgbmV3IHJvd1xuXHRcdHJvd3Muc3BsaWNlKG5ld1Jvd0luZGV4LCAwLCBuZXdSb3cpO1xuXG5cdFx0Ly8gVXBkYXRlIHN1YnNlcXVlbnQgcm93IG51bWJlcnNcblx0XHRmb3IgKGxldCBpID0gbmV3Um93SW5kZXggKyAxOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0cm93c1tpXSA9IHJvd3NbaV0ucmVwbGFjZSgvXlxcfChcXHMqKShcXGQrKVxcLi8sIChfLCBzcGFjZSwgbnVtKSA9PiBcblx0XHRcdFx0YHwke3NwYWNlfSR7cGFyc2VJbnQobnVtKSArIDF9LmBcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVwbGFjZSB0aGUgdGFibGUgaW4gdGhlIGVkaXRvclxuXHRcdGNvbnN0IG5ld1RhYmxlID0gcm93cy5qb2luKCdcXG4nKTtcblx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKG5ld1RhYmxlLCB7IGxpbmU6IHN0YXJ0TGluZSwgY2g6IDAgfSwgeyBsaW5lOiBlbmRMaW5lLCBjaDogZWRpdG9yLmdldExpbmUoZW5kTGluZSkubGVuZ3RoIH0pO1xuXHR9XG59XG5cbmNsYXNzIE51bWJlcmVkUm93U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IE51bWJlcmVkUm93UGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE51bWJlcmVkUm93UGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ051bWJlcmVkIFJvdyBQbHVnaW4gU2V0dGluZ3MnfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdTZXR0aW5nICMxJylcblx0XHRcdC5zZXREZXNjKCdJdFxcJ3MgYSBzZWNyZXQnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBzZWNyZXQnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0fVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBNkU7QUFNN0UsSUFBTSxtQkFBcUM7QUFBQSxFQUMxQyxXQUFXO0FBQ1o7QUFFQSxJQUFxQixvQkFBckIsY0FBK0MsdUJBQU87QUFBQSxFQUdyRCxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUss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
